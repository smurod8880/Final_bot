"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

from globals import TRADING_PAIRS, TIMEFRAMES, STRATEGY_CONFIG
from database import Database
from websocket import BinanceWebSocket
from signal_analyzer import SignalAnalyzer
from ai_model import AIPredictor

logger = logging.getLogger(__name__)

class TradingCore:
    def __init__(self, telegram_bot, database):
        self.telegram = telegram_bot
        self.database = database
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.websocket = None
        self.signal_analyzer = None
        self.ai_predictor = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.pairs = TRADING_PAIRS
        self.timeframes = TIMEFRAMES
        self.config = STRATEGY_CONFIG
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        self.initialization_time = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_analysis_cycles = 0
        self.successful_analysis_cycles = 0
        self.total_signals_generated = 0
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
            await self._initialize_websocket()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            await self._initialize_signal_analyzer()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è
            await self._initialize_ai_predictor()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not await self._validate_initialization():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
                
            self.is_initialized = True
            self.initialization_time = datetime.now()
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–æ–µ —è–¥—Ä–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞: {e}")
            raise
            
    async def _initialize_websocket(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket...")
            
            self.websocket = BinanceWebSocket()
            await self.websocket.initialize()
            
            logger.info("‚úÖ WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: {e}")
            raise
            
    async def _initialize_signal_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            self.signal_analyzer = SignalAnalyzer(self.telegram, self.database)
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            raise
            
    async def _initialize_ai_predictor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è"""
        try:
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è...")
            
            self.ai_predictor = AIPredictor()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            try:
                model_path = "trading_model.json"
                self.ai_predictor.load_model(model_path)
                logger.info("üìÅ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            except Exception as e:
                logger.warning("üÜï –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å")
                
            logger.info("‚úÖ AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è: {e}")
            raise
            
    async def _validate_initialization(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
            if not self.websocket:
                logger.error("‚ùå WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            if not self.signal_analyzer:
                logger.error("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è
            if not self.ai_predictor:
                logger.error("‚ùå AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
            market_data = self.websocket.get_market_data()
            if not market_data:
                logger.error("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            data_ok = True
            for pair in self.pairs[:2]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø–∞—Ä—ã
                for timeframe in self.timeframes[:2]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    if pair in market_data and timeframe in market_data[pair]:
                        df = market_data[pair][timeframe]
                        if len(df) < 50:
                            logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair} {timeframe}: {len(df)}")
                            data_ok = False
                            
            if not data_ok:
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
            
    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if not self.is_initialized:
                logger.error("‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ —è–¥—Ä–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
                
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            # –ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            websocket_task = asyncio.create_task(self.websocket.start_data_stream())
            
            # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è AI
            ai_retrain_task = asyncio.create_task(self._ai_retrain_loop())
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            monitoring_task = asyncio.create_task(self._performance_monitoring_loop())
            
            self.is_running = True
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.gather(
                websocket_task,
                ai_retrain_task,
                monitoring_task,
                return_exceptions=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            raise
        finally:
            self.is_running = False
            
    async def _ai_retrain_loop(self):
        """–¶–∏–∫–ª –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–∏"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è AI...")
            
            while self.is_running:
                try:
                    # –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                    await asyncio.sleep(3600)  # 1 —á–∞—Å
                    
                    if not self.is_running:
                        break
                        
                    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    await self.ai_predictor.retrain_model()
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    model_path = "trading_model.json"
                    self.ai_predictor.save_model(model_path)
                    
                    logger.info("ü§ñ AI –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è AI: {e}")
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è AI: {e}")
            
    async def _performance_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            
            while self.is_running:
                try:
                    # –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                    
                    if not self.is_running:
                        break
                        
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    stats = await self._collect_performance_stats()
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Telegram
                    await self.telegram.send_daily_stats(stats)
                    
                    logger.info("üìà –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
    async def _collect_performance_stats(self) -> Dict[str, Any]:
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_stats = await self.database.get_daily_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebSocket
            ws_stats = self.websocket.get_connection_status()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –º–æ–¥–µ–ª–∏
            ai_stats = self.ai_predictor.get_model_performance()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞
            core_stats = {
                'total_analysis_cycles': self.total_analysis_cycles,
                'successful_analysis_cycles': self.successful_analysis_cycles,
                'success_rate': (self.successful_analysis_cycles / self.total_analysis_cycles * 100) if self.total_analysis_cycles > 0 else 0,
                'total_signals_generated': self.total_signals_generated,
                'uptime': (datetime.now() - self.initialization_time).total_seconds() if self.initialization_time else 0
            }
            
            return {
                'database': db_stats,
                'websocket': ws_stats,
                'ai_model': ai_stats,
                'core': core_stats,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
            
    async def analyze_market_and_generate_signals(self, market_data: Dict[str, Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            self.total_analysis_cycles += 1
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
            signals = await self.signal_analyzer.analyze_all_pairs(market_data)
            
            if signals:
                self.total_signals_generated += len(signals)
                self.successful_analysis_cycles += 1
                
                logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            else:
                logger.debug("üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return []
            
    async def get_market_data(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.websocket:
                logger.error("‚ùå WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
                
            return self.websocket.get_market_data()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
            
    async def get_latest_price(self, pair: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã"""
        try:
            if not self.websocket:
                return None
                
            return self.websocket.get_latest_price(pair)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {pair}: {e}")
            return None
            
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞...")
            
            self.is_running = False
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ WebSocket
            if self.websocket:
                await self.websocket.shutdown()
                
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏
            if self.ai_predictor:
                try:
                    model_path = "trading_model.json"
                    self.ai_predictor.save_model(model_path)
                    logger.info("üíæ AI –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI –º–æ–¥–µ–ª–∏: {e}")
                    
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–æ–µ —è–¥—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞: {e}")
            
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞"""
        try:
            uptime = (datetime.now() - self.initialization_time).total_seconds() if self.initialization_time else 0
            
            return {
                'is_initialized': self.is_initialized,
                'is_running': self.is_running,
                'uptime': uptime,
                'initialization_time': self.initialization_time.isoformat() if self.initialization_time else None,
                'total_analysis_cycles': self.total_analysis_cycles,
                'successful_analysis_cycles': self.successful_analysis_cycles,
                'success_rate': (self.successful_analysis_cycles / self.total_analysis_cycles * 100) if self.total_analysis_cycles > 0 else 0,
                'total_signals_generated': self.total_signals_generated,
                'pairs_count': len(self.pairs),
                'timeframes_count': len(self.timeframes),
                'websocket_status': self.websocket.get_connection_status() if self.websocket else {},
                'ai_model_performance': self.ai_predictor.get_model_performance() if self.ai_predictor else {}
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}
