import requests
from globals import BOT_TOKEN, CHAT_ID

class TelegramBotHandler:
    def __init__(self, token, chat_id):
        self.token = token
        self.chat_id = chat_id

    async def initialize(self):
        # –ü—É—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        pass

    async def send_signal(self, signal):
        direction_emoji = "üü¢" if signal['direction'] == 'UP' else "üî¥"
        patterns = "\n".join([f"‚Ä¢ {p}" for p in signal.get('reasons', [])])
        
        message = (
            f"{direction_emoji} *QUOTEX SIGNAL* {direction_emoji}\n\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤: `{signal['pair']}`\n"
            f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `{signal['timeframe']}`\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: `{signal['direction']}`\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: `{signal['confidence']:.2f}%`\n"
            f"‚Ä¢ –¶–µ–Ω–∞: `{signal['price']:.6f}`\n"
            f"‚Ä¢ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: `{signal['expiration']}`\n\n"
            f"üìä *–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:*\n{patterns}\n\n"
            f"_–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI QuotexSignalNet v1.0_"
        )
        
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code != 200:
                print(f"Telegram error: {response.text}")
        except Exception as e:
            print(f"Telegram send error: {str(e)}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º send_message –¥–ª—è send_signal
    send_message = send_signal
