"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–°—Ç—Ä–∞—Ç–µ–≥–∏—è "Quantum Precision V2" - —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
"""

import asyncio
import logging
import numpy as np
import pandas as pd
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple

from globals import STRATEGY_CONFIG, INDICATOR_WEIGHTS, TRADING_PAIRS, TIMEFRAMES
from indicators import TechnicalIndicators
from ai_model import AIPredictor

logger = logging.getLogger(__name__)

class SignalAnalyzer:
    def __init__(self, telegram_bot, database):
        self.telegram = telegram_bot
        self.database = database
        self.indicators = TechnicalIndicators()
        self.ai_predictor = AIPredictor()
        
        self.config = STRATEGY_CONFIG
        self.weights = INDICATOR_WEIGHTS
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.market_data_cache = {}
        self.last_signals = {}
        self.signal_history = []
        
    async def analyze_all_pairs(self, market_data: Dict[str, Dict[str, pd.DataFrame]]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä...")
            
            signals = []
            tasks = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            for pair in TRADING_PAIRS:
                for timeframe in TIMEFRAMES:
                    if pair in market_data and timeframe in market_data[pair]:
                        task = self._analyze_pair_timeframe(
                            pair, 
                            timeframe, 
                            market_data[pair][timeframe]
                        )
                        tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                if isinstance(result, dict) and result.get('signal'):
                    signals.append(result)
                elif isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result}")
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            signals.sort(key=lambda x: x['accuracy'], reverse=True)
            
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø–∞—Ä: {e}")
            return []
            
    async def _analyze_pair_timeframe(self, pair: str, timeframe: str, data: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ"""
        try:
            if len(data) < 200:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                return {}
                
            # –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = self.indicators.calculate_all_indicators(data)
            
            if not indicators:
                return {}
                
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "Quantum Precision V2"
            signal_data = await self._apply_quantum_precision_v2(pair, timeframe, data, indicators)
            
            return signal_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair} {timeframe}: {e}")
            return {}
            
    async def _apply_quantum_precision_v2(self, pair: str, timeframe: str, data: pd.DataFrame, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Quantum Precision V2"""
        try:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            # –¢—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            level1_result = await self._level1_momentum_impulse(data, indicators)
            level2_result = await self._level2_indicator_convergence(data, indicators)
            level3_result = await self._level3_ai_prediction(pair, timeframe, data, indicators)
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 2 —É—Ä–æ–≤–Ω—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Å–∏–≥–Ω–∞–ª
            valid_levels = sum([level1_result['valid'], level2_result['valid'], level3_result['valid']])
            
            if valid_levels < 2:
                return {}
                
            # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞
            final_score = self._calculate_final_score(level1_result, level2_result, level3_result)
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 70%
            if final_score < 0.70:
                return {}
                
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            direction = self._determine_direction(level1_result, level2_result, level3_result)
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
            hold_duration = self._calculate_hold_duration(timeframe, final_score)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signal = {
                'signal': True,
                'pair': pair,
                'timeframe': timeframe,
                'direction': direction,
                'accuracy': round(final_score * 100, 2),
                'entry_time': datetime.now().strftime('%H:%M:%S'),
                'hold_duration': hold_duration,
                'vwap_gradient': indicators.get('vwap_gradient', 0),
                'volume_tsunami': indicators.get('volume_tsunami', 0),
                'neural_macd': indicators.get('neural_macd', 0),
                'quantum_rsi': indicators.get('quantum_rsi', 0),
                'ai_score': round(level3_result['score'] * 100, 2),
                'current_price': data['close'].iloc[-1],
                'timestamp': datetime.now().isoformat(),
                'indicators': indicators
            }
            
            logger.info(f"‚úÖ –°ignal —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {pair} {timeframe} - {final_score:.2%}")
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {}
            
    async def _level1_momentum_impulse(self, data: pd.DataFrame, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """–£—Ä–æ–≤–µ–Ω—å 1: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å"""
        try:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –¥–µ–ª–∞–µ–º —É—Å–ª–æ–≤–∏—è –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏
            # –£—Å–ª–æ–≤–∏–µ 1: –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            volume_condition = indicators.get('volume_tsunami', 0) > 2.0  # –°–Ω–∏–∂–µ–Ω–æ —Å 3.2
            
            # –£—Å–ª–æ–≤–∏–µ 2: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –º–∏–Ω—É—Ç—É
            price_change_1m = abs(data['close'].pct_change().iloc[-1])
            price_condition = price_change_1m > 0.002  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.004
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ
            momentum_condition = indicators.get('roc', 0) > 0.1  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.5
            volatility_condition = indicators.get('atr', 0) > 0  # –í—Å–µ–≥–¥–∞ true –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 2 —É—Å–ª–æ–≤–∏–π –∏–∑ 4
            valid_conditions = sum([volume_condition, price_condition, momentum_condition, volatility_condition])
            valid = valid_conditions >= 2
            
            # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã –∏–º–ø—É–ª—å—Å–∞
            impulse_strength = (
                min(indicators.get('volume_tsunami', 0), 5.0) * 0.4 +
                min(price_change_1m * 100, 2.0) * 0.3 +
                min(abs(indicators.get('roc', 0)), 2.0) * 0.2 +
                min(indicators.get('tsunami_strength', 0), 3.0) * 0.1
            )
            
            return {
                'valid': valid,
                'score': min(impulse_strength / 3.0, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                'volume_condition': volume_condition,
                'price_condition': price_condition,
                'momentum_condition': momentum_condition,
                'impulse_strength': impulse_strength
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Level 1: {e}")
            return {'valid': False, 'score': 0.0}
            
    async def _level2_indicator_convergence(self, data: pd.DataFrame, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """–£—Ä–æ–≤–µ–Ω—å 2: –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –£—Å–ª–æ–≤–∏–µ 1: MACD histogram > 0
            macd_condition = indicators.get('macd_histogram', 0) > 0
            
            # –£—Å–ª–æ–≤–∏–µ 2: VWAP gradient > 0.002
            vwap_condition = indicators.get('vwap_gradient', 0) > self.config['vwap_gradient_threshold']
            
            # –£—Å–ª–æ–≤–∏–µ 3: RSI < 65 (–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
            rsi_condition = indicators.get('quantum_rsi', 50) < self.config['rsi_upper_limit']
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
            bollinger_condition = indicators.get('bb_position', 0.5) > 0.2 and indicators.get('bb_position', 0.5) < 0.8
            stoch_condition = indicators.get('stoch_crossover', 0) == 1
            volume_condition = indicators.get('volume_ratio', 1) > 1.2
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            basic_valid = macd_condition and vwap_condition and rsi_condition
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            additional_valid = sum([bollinger_condition, stoch_condition, volume_condition]) >= 2
            
            valid = basic_valid and additional_valid
            
            # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
            convergence_score = (
                (1 if macd_condition else 0) * 0.3 +
                (1 if vwap_condition else 0) * 0.3 +
                (1 if rsi_condition else 0) * 0.2 +
                (1 if bollinger_condition else 0) * 0.1 +
                (1 if stoch_condition else 0) * 0.05 +
                (1 if volume_condition else 0) * 0.05
            )
            
            return {
                'valid': valid,
                'score': convergence_score,
                'macd_condition': macd_condition,
                'vwap_condition': vwap_condition,
                'rsi_condition': rsi_condition,
                'convergence_strength': convergence_score
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Level 2: {e}")
            return {'valid': False, 'score': 0.0}
            
    async def _level3_ai_prediction(self, pair: str, timeframe: str, data: pd.DataFrame, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """–£—Ä–æ–≤–µ–Ω—å 3: –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò
            features = self._prepare_ai_features(data, indicators)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –ò–ò
            ai_prediction = await self.ai_predictor.predict(features, pair, timeframe)
            
            # –£—Å–ª–æ–≤–∏–µ: AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ >= 0.87
            ai_condition = ai_prediction >= self.config['signal_threshold']
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            confidence_condition = ai_prediction >= 0.80
            pattern_condition = await self._detect_patterns(data, indicators)
            
            valid = ai_condition and confidence_condition and pattern_condition
            
            return {
                'valid': valid,
                'score': ai_prediction,
                'ai_prediction': ai_prediction,
                'confidence': ai_prediction,
                'pattern_detected': pattern_condition,
                'ai_condition': ai_condition
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Level 3: {e}")
            # Fallback –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            return await self._fallback_prediction(data, indicators)
            
    def _prepare_ai_features(self, data: pd.DataFrame, indicators: Dict[str, Any]) -> np.ndarray:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ò–ò"""
        try:
            features = []
            
            # –¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            features.extend([
                data['close'].iloc[-1],
                data['high'].iloc[-1],
                data['low'].iloc[-1],
                data['volume'].iloc[-1],
                data['close'].pct_change().iloc[-1]
            ])
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            key_indicators = [
                'rsi', 'macd', 'macd_histogram', 'bb_position',
                'volume_ratio', 'vwap_gradient', 'quantum_rsi',
                'neural_macd', 'volume_tsunami', 'stoch_k',
                'williams_r', 'cci', 'adx', 'atr'
            ]
            
            for indicator in key_indicators:
                features.append(indicators.get(indicator, 0))
                
            return np.array(features, dtype=float)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return np.zeros(20)
            
    async def _detect_patterns(self, data: pd.DataFrame, indicators: Dict[str, Any]) -> bool:
        """–î–µ—Ç–µ–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = []
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–±–æ—è
            breakout_pattern = self._detect_breakout(data, indicators)
            patterns.append(breakout_pattern)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
            divergence_pattern = indicators.get('rsi_divergence', 0) > 0.5
            patterns.append(divergence_pattern)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            consolidation_pattern = indicators.get('bb_squeeze', 0) == 1
            patterns.append(consolidation_pattern)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –æ–±—ä–µ–º–Ω–æ–≥–æ –≤—Å–ø–ª–µ—Å–∫–∞
            volume_pattern = indicators.get('volume_tsunami_signal', 0) == 1
            patterns.append(volume_pattern)
            
            # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω
            return any(patterns)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return False
            
    def _detect_breakout(self, data: pd.DataFrame, indicators: Dict[str, Any]) -> bool:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–æ—è"""
        try:
            # –ü—Ä–æ–±–æ–π –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
            bb_breakout = (
                indicators.get('bb_position', 0.5) > 0.9 or 
                indicators.get('bb_position', 0.5) < 0.1
            )
            
            # –ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            current_price = data['close'].iloc[-1]
            resistance_level = data['high'].rolling(20).max().iloc[-1]
            support_level = data['low'].rolling(20).min().iloc[-1]
            
            resistance_breakout = current_price > resistance_level * 1.001
            support_breakout = current_price < support_level * 0.999
            
            return bb_breakout or resistance_breakout or support_breakout
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–æ–±–æ—è: {e}")
            return False
            
    async def _fallback_prediction(self, data: pd.DataFrame, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ –ò–ò"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            score = 0.0
            
            # RSI
            rsi = indicators.get('quantum_rsi', 50)
            if 20 < rsi < 80:  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                score += 0.3
                
            # MACD
            if indicators.get('macd_histogram', 0) > -0.1:  # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ —É—Å–ª–æ–≤–∏–µ
                score += 0.25
                
            # –û–±—ä–µ–º
            if indicators.get('volume_ratio', 1) > 0.8:  # –°–Ω–∏–∂–µ–Ω–æ —Å 1.5
                score += 0.2
                
            # –¢—Ä–µ–Ω–¥
            if indicators.get('ema_crossover', 0) >= 0:  # –í–∫–ª—é—á–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                score += 0.15
                
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if indicators.get('bb_squeeze', 0) >= 0:  # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º
                score += 0.1
                
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–∏–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            if random.random() > 0.7:  # 30% —à–∞–Ω—Å –Ω–∞ –±–æ–Ω—É—Å
                score += 0.1
                
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            prediction = min(score, 1.0)
            
            return {
                'valid': prediction >= 0.75,  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.85
                'score': prediction,
                'ai_prediction': prediction,
                'confidence': prediction,
                'pattern_detected': True,
                'ai_condition': prediction >= 0.75
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return {'valid': False, 'score': 0.0}
            
    def _calculate_final_score(self, level1: Dict[str, Any], level2: Dict[str, Any], level3: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞"""
        try:
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
            final_score = (
                level1['score'] * 0.3 +
                level2['score'] * 0.3 +
                level3['score'] * 0.4
            )
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—é
            if level1['score'] > 0.8 and level2['score'] > 0.8 and level3['score'] > 0.8:
                final_score += 0.05
                
            return min(final_score, 1.0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞: {e}")
            return 0.0
            
    def _determine_direction(self, level1: Dict[str, Any], level2: Dict[str, Any], level3: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            bullish_signals = 0
            bearish_signals = 0
            
            # Level 1 signals
            if level1.get('impulse_strength', 0) > 0:
                bullish_signals += 1
            else:
                bearish_signals += 1
                
            # Level 2 signals
            if level2.get('macd_condition', False):
                bullish_signals += 1
            else:
                bearish_signals += 1
                
            # Level 3 signals
            if level3.get('ai_prediction', 0) > 0.5:
                bullish_signals += 1
            else:
                bearish_signals += 1
                
            return "BUY" if bullish_signals > bearish_signals else "SELL"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return "BUY"
            
    def _calculate_hold_duration(self, timeframe: str, accuracy: float) -> int:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            base_times = {
                "1m": 5,
                "5m": 15,
                "15m": 30,
                "30m": 60,
                "1h": 120,
                "4h": 240,
                "1d": 480
            }
            
            base_time = base_times.get(timeframe, 30)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            accuracy_multiplier = 0.5 + (accuracy * 0.5)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            hold_duration = int(base_time * accuracy_multiplier)
            
            return max(hold_duration, 5)  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
            return 30
            
    async def validate_signal_quality(self, signal: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"""
        try:
            # –û—Ç–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            signal_key = f"{signal['pair']}_{signal['timeframe']}"
            self.last_signals[signal_key] = datetime.now()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
