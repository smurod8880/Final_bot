#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import random

from telegram_bot import TelegramBotHandler
from globals import BOT_TOKEN, CHAT_ID, TRADING_PAIRS, TIMEFRAMES, MESSAGE_FORMATS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('demo_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DemoTradingBot:
    def __init__(self):
        self.telegram = TelegramBotHandler(BOT_TOKEN, CHAT_ID)
        self.is_running = False
        self.signals_sent = 0
        self.start_time = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
            await self.telegram.initialize()
            
            # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.telegram.send_message(
                "ü§ñ Quantum Precision V2 (DEMO)\n\n"
                "üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞\n"
                "üéØ –¢–æ—á–Ω–æ—Å—Ç—å: 90%+\n"
                "üìà –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
                "üü¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
            )
            
            logger.info("‚úÖ –î–µ–º–æ-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–±–æ—Ç–∞"""
        try:
            self.is_running = True
            self.start_time = datetime.now()
            
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            while self.is_running:
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    signal = self._generate_demo_signal()
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
                    await self.telegram.send_signal(signal)
                    
                    self.signals_sent += 1
                    
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª #{self.signals_sent}: {signal['pair']} {signal['timeframe']}")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
                    if self.signals_sent % 10 == 0:
                        await self._send_statistics()
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ (30-60 —Å–µ–∫—É–Ω–¥)
                    await asyncio.sleep(random.randint(30, 60))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ-—Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(30)
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()
            
    def _generate_demo_signal(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            pair = random.choice(TRADING_PAIRS)
            timeframe = random.choice(TIMEFRAMES)
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
            accuracy = random.uniform(87.5, 98.5)
            direction = random.choice(["BUY", "SELL"])
            
            # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            hold_durations = {
                "1m": random.randint(5, 15),
                "5m": random.randint(15, 45),
                "15m": random.randint(30, 90),
                "30m": random.randint(60, 180),
                "1h": random.randint(120, 300),
                "4h": random.randint(240, 600),
                "1d": random.randint(480, 1440)
            }
            
            hold_duration = hold_durations.get(timeframe, 60)
            
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            vwap_gradient = random.uniform(0.001, 0.005)
            volume_tsunami = random.uniform(2.5, 5.0)
            neural_macd = random.uniform(0.05, 0.25)
            quantum_rsi = random.uniform(35, 65)
            ai_score = random.uniform(85, 95)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signal = {
                'pair': pair,
                'timeframe': timeframe,
                'accuracy': round(accuracy, 1),
                'entry_time': datetime.now().strftime('%H:%M:%S'),
                'hold_duration': hold_duration,
                'vwap_gradient': round(vwap_gradient, 4),
                'volume_tsunami': round(volume_tsunami, 1),
                'neural_macd': round(neural_macd, 2),
                'quantum_rsi': round(quantum_rsi, 1),
                'ai_score': round(ai_score, 1),
                'direction': direction
            }
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return self._get_fallback_signal()
            
    def _get_fallback_signal(self) -> Dict[str, Any]:
        """–ó–∞–ø–∞—Å–Ω–æ–π —Å–∏–≥–Ω–∞–ª"""
        return {
            'pair': 'BTCUSDT',
            'timeframe': '1h',
            'accuracy': 90.0,
            'entry_time': datetime.now().strftime('%H:%M:%S'),
            'hold_duration': 120,
            'vwap_gradient': 0.0025,
            'volume_tsunami': 3.5,
            'neural_macd': 0.15,
            'quantum_rsi': 45.0,
            'ai_score': 92.0,
            'direction': 'BUY'
        }
        
    async def _send_statistics(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            uptime = datetime.now() - self.start_time if self.start_time else timedelta(0)
            
            stats_message = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û-–ë–û–¢–ê

üéØ –°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.signals_sent}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}
üìà –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: 92.5%
üü¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {int(self.signals_sent * 0.925)}
üî¥ –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {int(self.signals_sent * 0.075)}

üî• –õ—É—á—à–∏–µ –ø–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ BTC/USDT: 94.2% (5 —Å–∏–≥–Ω–∞–ª–æ–≤)
‚Ä¢ ETH/USDT: 91.8% (4 —Å–∏–≥–Ω–∞–ª–∞)
‚Ä¢ SOL/USDT: 96.1% (3 —Å–∏–≥–Ω–∞–ª–∞)

üí° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!
            """
            
            await self.telegram.send_message(stats_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–µ–º–æ-–±–æ—Ç–∞...")
            
            self.is_running = False
            
            if self.telegram:
                await self.telegram.send_message(
                    f"üõë **–î–µ–º–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                    f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signals_sent}\n"
                    f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(datetime.now() - self.start_time).split('.')[0] if self.start_time else 'N/A'}\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Quantum Precision V2!"
                )
                
            logger.info("‚úÖ –î–µ–º–æ-–±–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = DemoTradingBot()
    
    try:
        await bot.initialize()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
