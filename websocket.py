import asyncio
import logging
import json
import websockets
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import aiohttp
from urllib.parse import urlencode

from globals import BINANCE_WS_URL, TRADING_PAIRS, TIMEFRAMES, SAFETY_LIMITS

logger = logging.getLogger(__name__)

class BinanceWebSocket:
    def __init__(self):
        self.ws_url = BINANCE_WS_URL
        self.pairs = TRADING_PAIRS
        self.timeframes = TIMEFRAMES
        self.connections = {}
        self.market_data = {}
        self.is_running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self._initialize_market_data()
        
    def _initialize_market_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        for pair in self.pairs:
            self.market_data[pair] = {}
            for timeframe in self.timeframes:
                self.market_data[pair][timeframe] = pd.DataFrame(columns=[
                    'timestamp', 'open', 'high', 'low', 'close', 'volume'
                ])
                
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance WebSocket...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await self._fetch_historical_data()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await self._create_websocket_connections()
            
            logger.info("‚úÖ Binance WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: {e}")
            raise
            
    async def _fetch_historical_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API"""
        try:
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            await self._generate_simulated_data()
            
            logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
            
    async def _generate_simulated_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            import random
            import numpy as np
            
            for pair in self.pairs:
                base_price = {
                    'BTCUSDT': 65000,
                    'ETHUSDT': 3500,
                    'BNBUSDT': 600,
                    'ADAUSDT': 0.45,
                    'XRPUSDT': 0.60,
                    'SOLUSDT': 150,
                    'DOGEUSDT': 0.25
                }.get(pair, 100)
                
                for timeframe in self.timeframes:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 500 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
                    df_data = []
                    current_time = datetime.now()
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
                    time_delta = {
                        '1m': timedelta(minutes=1),
                        '5m': timedelta(minutes=5),
                        '15m': timedelta(minutes=15),
                        '30m': timedelta(minutes=30),
                        '1h': timedelta(hours=1),
                        '4h': timedelta(hours=4),
                        '1d': timedelta(days=1)
                    }.get(timeframe, timedelta(minutes=1))
                    
                    price = base_price
                    
                    for i in range(500):
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                        price_change = random.uniform(-0.05, 0.05)  # ¬±5%
                        price = price * (1 + price_change)
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OHLC –¥–∞–Ω–Ω—ã—Ö
                        open_price = price
                        high_price = price * (1 + abs(random.uniform(0, 0.02)))
                        low_price = price * (1 - abs(random.uniform(0, 0.02)))
                        close_price = price * (1 + random.uniform(-0.01, 0.01))
                        volume = random.uniform(1000, 10000)
                        
                        candle_time = current_time - (time_delta * (500 - i))
                        
                        df_data.append({
                            'timestamp': candle_time,
                            'open': open_price,
                            'high': high_price,
                            'low': low_price,
                            'close': close_price,
                            'volume': volume
                        })
                        
                        price = close_price
                        
                    self.market_data[pair][timeframe] = pd.DataFrame(df_data)
                    logger.debug(f"üìà –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {pair} {timeframe} - {len(df_data)} —Å–≤–µ—á–µ–π")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
            
    async def _fetch_pair_timeframe_data(self, session: aiohttp.ClientSession, base_url: str, pair: str, timeframe: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'symbol': pair,
                'interval': timeframe,
                'limit': 500
            }
            
            url = f"{base_url}?{urlencode(params)}"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    df_data = []
                    for candle in data:
                        df_data.append({
                            'timestamp': pd.to_datetime(candle[0], unit='ms'),
                            'open': float(candle[1]),
                            'high': float(candle[2]),
                            'low': float(candle[3]),
                            'close': float(candle[4]),
                            'volume': float(candle[5])
                        })
                        
                    self.market_data[pair][timeframe] = pd.DataFrame(df_data)
                    
                    logger.debug(f"üìà –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {pair} {timeframe} - {len(df_data)} —Å–≤–µ—á–µ–π")
                    
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {pair} {timeframe}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {pair} {timeframe}: {e}")
            
    async def _create_websocket_connections(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - —Å–∏–º—É–ª—è—Ü–∏—è"""
        try:
            logger.info("üîå –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.connections['main'] = 'simulated_connection'
            
            logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            raise
            
    async def start_data_stream(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Å–∏–º—É–ª—è—Ü–∏—è"""
        try:
            if self.is_running:
                return
                
            self.is_running = True
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            await self._simulate_data_updates()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            self.is_running = False
            
    async def _simulate_data_updates(self):
        try:
            import random
            
            while self.is_running:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                for pair in self.pairs:
                    for timeframe in self.timeframes:
                        if pair in self.market_data and timeframe in self.market_data[pair]:
                            df = self.market_data[pair][timeframe]
                            
                            if len(df) > 0:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                                last_candle = df.iloc[-1].copy()
                                
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
                                price_change = random.uniform(-0.001, 0.001)  # ¬±0.1%
                                new_close = last_candle['close'] * (1 + price_change)
                                
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                                df.iloc[-1, df.columns.get_loc('close')] = new_close
                                df.iloc[-1, df.columns.get_loc('high')] = max(last_candle['high'], new_close)
                                df.iloc[-1, df.columns.get_loc('low')] = min(last_candle['low'], new_close)
                                df.iloc[-1, df.columns.get_loc('volume')] = last_candle['volume'] + random.uniform(10, 100)
                                
                                logger.debug(f"üìä –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pair} {timeframe} - {new_close:.4f}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.is_running = False
            
    def get_market_data(self) -> Dict[str, Dict[str, pd.DataFrame]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.market_data.copy()
        
    def get_latest_price(self, pair: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã"""
        try:
            if pair in self.market_data and '1m' in self.market_data[pair]:
                df = self.market_data[pair]['1m']
                if len(df) > 0:
                    return df['close'].iloc[-1]
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {pair}: {e}")
            return None
            
    def get_pair_timeframe_data(self, pair: str, timeframe: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        try:
            if pair in self.market_data and timeframe in self.market_data[pair]:
                return self.market_data[pair][timeframe].copy()
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {pair} {timeframe}: {e}")
            return None
            
    async def shutdown(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            logger.info("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            
            self.is_running = False
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            for conn_name, connection in self.connections.items():
                try:
                    if hasattr(connection, "close") and callable(connection.close):
                        await connection.close()
                        logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {conn_name} –∑–∞–∫—Ä—ã—Ç–æ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {conn_name}: {e}")
                    
            self.connections.clear()
            
            logger.info("‚úÖ –í—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            
    def get_connection_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return {
            'is_running': self.is_running,
            'connections_count': len(self.connections),
            'pairs_count': len(self.pairs),
            'timeframes_count': len(self.timeframes),
            'total_streams': len(self.pairs) * len(self.timeframes)
        }
        
    def get_data_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        stats = {
            'total_pairs': len(self.pairs),
            'total_timeframes': len(self.timeframes),
            'data_points': {},
            'latest_updates': {}
        }
        
        for pair in self.pairs:
            stats['data_points'][pair] = {}
            stats['latest_updates'][pair] = {}
            
            for timeframe in self.timeframes:
                df = self.market_data[pair][timeframe]
                stats['data_points'][pair][timeframe] = len(df)
                
                if len(df) > 0:
                    stats['latest_updates'][pair][timeframe] = df['timestamp'].iloc[-1].isoformat()
                else:
                    stats['latest_updates'][pair][timeframe] = None
                    
        return stats
      
