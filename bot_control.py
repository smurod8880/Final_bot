"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import signal
import sys

from core import TradingCore
from telegram_bot import TelegramBotHandler
from database import Database

logger = logging.getLogger(__name__)

class BotController:
    def __init__(self, trading_core, telegram_bot):
        self.core = trading_core
        self.telegram = telegram_bot
        self.is_active = False
        self.start_time = None
        self.last_signal_time = None
        self.signals_sent_today = 0
        self.signals_sent_hour = 0
        self.hour_reset_time = datetime.now().replace(minute=0, second=0, microsecond=0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_cycles = 0
        self.successful_cycles = 0
        self.errors_count = 0
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        self.emergency_stop = False
        self.max_errors_per_hour = 20
        self.errors_this_hour = 0
        self.error_reset_time = datetime.now().replace(minute=0, second=0, microsecond=0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        import globals
        globals.bot_controller = self
        
    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if self.is_active:
                logger.warning("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return
                
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not await self._check_system_readiness():
                logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
                return
                
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤
            self.is_active = True
            self.start_time = datetime.now()
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
            self._reset_counters()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.telegram.send_message(
                "üü¢ **–¢–û–†–ì–û–í–õ–Ø –ù–ê–ß–ê–¢–ê**\n\n"
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time.strftime('%H:%M:%S')}\n"
                f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Quantum Precision V2\n"
                f"üìä –ü–∞—Ä: {len(self.core.pairs)}\n"
                f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {len(self.core.timeframes)}\n\n"
                "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."
            )
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            await self._main_trading_loop()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            await self.telegram.send_error("BotController", str(e))
            
    async def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if not self.is_active:
                logger.warning("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return
                
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤
            self.is_active = False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            uptime = datetime.now() - self.start_time if self.start_time else timedelta(0)
            
            await self.telegram.send_message(
                "üî¥ **–¢–û–†–ì–û–í–õ–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê**\n\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}\n"
                f"üìä –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.total_cycles}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {self.successful_cycles}\n"
                f"üìà –°ignal–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.signals_sent_today}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {self.errors_count}\n\n"
                "–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
            )
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            
    async def _check_system_readiness(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞
            if not self.core:
                logger.error("‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ —è–¥—Ä–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞
            if not self.telegram:
                logger.error("‚ùå Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if not self.core.websocket or not self.core.websocket.connections:
                logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = self.core.websocket.get_market_data()
            if not market_data:
                logger.error("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            data_check_passed = True
            for pair in self.core.pairs:
                for timeframe in self.core.timeframes:
                    if pair in market_data and timeframe in market_data[pair]:
                        df = market_data[pair][timeframe]
                        if len(df) < 100:  # –ú–∏–Ω–∏–º—É–º 100 —Å–≤–µ—á–µ–π
                            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair} {timeframe}: {len(df)}")
                            data_check_passed = False
                            
            if not data_check_passed:
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
                
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
            
    async def _main_trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            while self.is_active and not self.emergency_stop:
                cycle_start = datetime.now()
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    if not self._check_safety_limits():
                        logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–∞—É–∑–∞...")
                        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞
                        continue
                        
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    market_data = self.core.websocket.get_market_data()
                    
                    if not market_data:
                        logger.warning("‚ö†Ô∏è –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                        await asyncio.sleep(10)
                        continue
                        
                    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
                    signals = await self.core.signal_analyzer.analyze_all_pairs(market_data)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    if signals:
                        await self._process_signals(signals)
                        
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    self.total_cycles += 1
                    self.successful_cycles += 1
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    if self.total_cycles % 100 == 0:
                        await self._log_progress()
                        
                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    self._reset_time_based_counters()
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                    self.errors_count += 1
                    self.errors_this_hour += 1
                    
                    await self.telegram.send_error("TradingLoop", str(e))
                    
                finally:
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    await self._wait_next_cycle(cycle_start)
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await self.telegram.send_error("MainLoop", str(e))
        finally:
            logger.info("üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            
    async def _process_signals(self, signals: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            for signal in signals:
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    if not await self._validate_signal(signal):
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
                    if not self._check_signal_limits():
                        logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤")
                        break
                        
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
                    success = await self.telegram.send_signal(signal)
                    
                    if success:
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        signal_id = await self.core.database.save_signal(signal)
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
                        self.signals_sent_today += 1
                        self.signals_sent_hour += 1
                        self.last_signal_time = datetime.now()
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        import globals
                        globals.performance_stats['total_signals'] += 1
                        globals.performance_stats['daily_signals'] += 1
                        globals.performance_stats['hourly_signals'] += 1
                        
                        logger.info(f"‚úÖ –°ignal –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal['pair']} {signal['timeframe']}")
                        
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {signal['pair']} {signal['timeframe']}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            
    async def _validate_signal(self, signal: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['pair', 'timeframe', 'direction', 'accuracy', 'entry_time']
            for field in required_fields:
                if field not in signal:
                    logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ —Å–∏–≥–Ω–∞–ª–µ")
                    return False
                    
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
            if signal['accuracy'] < 85:  # –£—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏
                logger.debug(f"üìä –°ignal –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏: {signal['accuracy']}%")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            if self.last_signal_time:
                time_diff = (datetime.now() - self.last_signal_time).total_seconds()
                if time_diff < 60:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 60 —Å–µ–∫—É–Ω–¥
                    logger.debug(f"‚è±Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {time_diff}s")
                    return False
                    
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            return await self.core.signal_analyzer.validate_signal_quality(signal)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
            
    def _check_signal_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
            if self.signals_sent_hour >= 5:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signals_sent_hour}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            if self.signals_sent_today >= 40:  # –ú–∞–∫—Å–∏–º—É–º 40 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signals_sent_today}")
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return False
            
    def _check_safety_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –≤ —á–∞—Å
            if self.errors_this_hour >= self.max_errors_per_hour:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫ –≤ —á–∞—Å: {self.errors_this_hour}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.emergency_stop:
                logger.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–∞ –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return False
            
    def _reset_time_based_counters(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            current_time = datetime.now()
            
            # –°–±—Ä–æ—Å —á–∞—Å–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            if current_time >= self.hour_reset_time + timedelta(hours=1):
                self.signals_sent_hour = 0
                self.hour_reset_time = current_time.replace(minute=0, second=0, microsecond=0)
                
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
            if current_time >= self.error_reset_time + timedelta(hours=1):
                self.errors_this_hour = 0
                self.error_reset_time = current_time.replace(minute=0, second=0, microsecond=0)
                
            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            if current_time.date() != self.start_time.date():
                self.signals_sent_today = 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
            
    async def _wait_next_cycle(self, cycle_start: datetime):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            cycle_duration = (datetime.now() - cycle_start).total_seconds()
            wait_time = max(0, 10 - cycle_duration)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ 10 —Å–µ–∫—É–Ω–¥
            
            if wait_time > 0:
                await asyncio.sleep(wait_time)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞: {e}")
            await asyncio.sleep(10)
            
    async def _log_progress(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            uptime = datetime.now() - self.start_time if self.start_time else timedelta(0)
            success_rate = (self.successful_cycles / self.total_cycles * 100) if self.total_cycles > 0 else 0
            
            logger.info(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.total_cycles} —Ü–∏–∫–ª–æ–≤, "
                f"{success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö, "
                f"{self.signals_sent_today} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è, "
                f"—Ä–∞–±–æ—Ç–∞–µ—Ç {str(uptime).split('.')[0]}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
    def _reset_counters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        try:
            self.total_cycles = 0
            self.successful_cycles = 0
            self.errors_count = 0
            self.signals_sent_today = 0
            self.signals_sent_hour = 0
            self.errors_this_hour = 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
            
    def is_trading_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return self.is_active and not self.emergency_stop
        
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            uptime = datetime.now() - self.start_time if self.start_time else timedelta(0)
            return {
                'is_active': self.is_active,
                'emergency_stop': self.emergency_stop,
                'uptime': str(uptime).split('.')[0],
                'total_cycles': self.total_cycles,
                'successful_cycles': self.successful_cycles,
                'success_rate': (self.successful_cycles / self.total_cycles * 100) if self.total_cycles > 0 else 0,
                'signals_sent_today': self.signals_sent_today,
                'signals_sent_hour': self.signals_sent_hour,
                'errors_count': self.errors_count,
                'errors_this_hour': self.errors_this_hour,
                'last_signal_time': self.last_signal_time.isoformat() if self.last_signal_time else None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}
            
    async def emergency_shutdown(self, reason: str = "Unknown"):
        """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï: {reason}")
            
            self.emergency_stop = True
            self.is_active = False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.telegram.send_message(
                f"üö® **–ê–í–ê–†–ò–ô–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï**\n\n"
                f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            )
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.core.shutdown()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            def signal_handler(signum, frame):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
                asyncio.create_task(self.emergency_shutdown(f"System signal {signum}"))
                
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    bot = TradingBot()
    
    try:
        await bot.initialize()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
  
