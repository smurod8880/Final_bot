#!/usr/bin/env python3
"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–°—Ç—Ä–∞—Ç–µ–≥–∏—è "Quantum Precision V2"
–¢–æ—á–Ω–æ—Å—Ç—å: 85%+, 30-35 —Å–∏–≥–Ω–∞–ª–æ–≤/—Å—É—Ç–∫–∏
"""

import asyncio
import logging
import signal
import sys
from typing import Dict, Any

from core import TradingCore
from globals import TRADING_PAIRS, TIMEFRAMES, BOT_TOKEN, CHAT_ID
from telegram_bot import TelegramBotHandler
from database import Database
from bot_control import BotController

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class TradingBot:
    def __init__(self):
        self.core = None
        self.telegram = None
        self.database = None
        self.controller = None
        self.running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.database = Database()
            await self.database.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
            self.telegram = TelegramBotHandler(BOT_TOKEN, CHAT_ID)
            await self.telegram.initialize()  # –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —è–¥—Ä–∞
            self.core = TradingCore(self.telegram, self.database)
            await self.core.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            self.controller = BotController(self.core, self.telegram)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
            await self.controller.start_trading()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            await self.telegram.send_signal({  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: send_signal –≤–º–µ—Å—Ç–æ send_message
                "pair": "SYSTEM",
                "direction": "UP",
                "confidence": 100,
                "price": 0,
                "expiration": "N/A",
                "reasons": ["–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"]
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
            
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            self.running = True
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            telegram_task = asyncio.create_task(self.telegram.run())
            
            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await self.core.start_trading()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await telegram_task
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            if self.telegram:
                await self.telegram.send_signal({  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: send_signal
                    "pair": "SYSTEM",
                    "direction": "DOWN",
                    "confidence": 100,
                    "price": 0,
                    "expiration": "N/A",
                    "reasons": ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"]
                })
        finally:
            await self.shutdown()
            
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            self.running = False
            
            if self.core:
                await self.core.shutdown()
                
            if self.telegram:
                await self.telegram.send_signal({  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: send_signal
                    "pair": "SYSTEM",
                    "direction": "DOWN",
                    "confidence": 100,
                    "price": 0,
                    "expiration": "N/A",
                    "reasons": ["–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"]
                })
                await self.telegram.shutdown()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ telegram_bot.py
                
            if self.database:
                await self.database.close()
                
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    bot = TradingBot()
    
    try:
        await bot.initialize()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
